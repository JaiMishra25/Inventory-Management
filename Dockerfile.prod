# Production Dockerfile for Inventory Management Tool
# Multi-stage build for optimized production image

# Stage 1: Build the React frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install frontend dependencies
RUN npm install --omit=dev

# Copy frontend source code
COPY frontend/ ./

# Build the frontend
RUN npm run build

# Stage 2: Python backend
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PORT=8080
ENV PYTHONPATH=/app

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set work directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source code
COPY app/ ./app/

# Copy built frontend from stage 1
COPY --from=frontend-builder /app/frontend/build ./frontend/build

# Create a production server script
RUN echo '#!/usr/bin/env python3\n\
import os\n\
import uvicorn\n\
from fastapi import FastAPI\n\
from fastapi.staticfiles import StaticFiles\n\
from fastapi.responses import FileResponse\n\
from app.main import app\n\
\n\
# Mount the frontend build directory\n\
app.mount("/static", StaticFiles(directory="frontend/build/static"), name="static")\n\
\n\
@app.get("/")\n\
async def serve_frontend():\n\
    return FileResponse("frontend/build/index.html")\n\
\n\
@app.get("/manifest.json")\n\
async def serve_manifest():\n\
    return FileResponse("frontend/build/manifest.json")\n\
\n\
if __name__ == "__main__":\n\
    port = int(os.getenv("PORT", 8080))\n\
    uvicorn.run(\n\
        app,\n\
        host="0.0.0.0",\n\
        port=port,\n\
        workers=1,\n\
        log_level="info"\n\
    )\n\
' > /app/run_app.py

# Make the script executable
RUN chmod +x /app/run_app.py

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose the port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/ || exit 1

# Start the application
CMD ["python", "run_app.py"] 